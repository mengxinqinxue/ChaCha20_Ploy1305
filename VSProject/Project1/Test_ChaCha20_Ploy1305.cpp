#include "Test_ChaCha20_Ploy1305.h"
#include "ChaCha20_Ploy1305.h"
#include "Common.h"

void Test_Ploy1305()
{
    //Test clamp(r)
    uint8_t r[16] = {
    0x85,0xD6,0xBE,0x78,0x57,0x55,0x6D,0x33,0x7F,0x44,0x52,0xFE,0x42,0xD5,0x06,0xA8 };
    uint8_t r_ans[16] = {
    0x08,0x06,0xD5,0x40,0x0E,0x52,0x44,0x7C,0x03,0x6D,0x55,0x54,0x08,0xBE,0xD6,0x85 };

    printf("Test clamp(r) Result: \n");
    Poly1305_Clamp_R(r);
    Check_Clac_Consistency(r, r_ans, 16);


    //Test Ploy1305 vector #0
    uint8_t key0[] = {
        0x85,0xD6,0xBE,0x78,0x57,0x55,0x6D,0x33,0x7F,0x44,0x52,0xFE,0x42,0xD5,0x06,0xA8,
        0x01,0x03,0x80,0x8A,0xFB,0x0D,0xB2,0xFD,0x4A,0xBF,0xF6,0xAF,0x41,0x49,0xF5,0x1B };
    uint8_t msg0[] = {
        0x43,0x72,0x79,0x70,0x74,0x6F,0x67,0x72,0x61,0x70,0x68,0x69,0x63,0x20,0x46,0x6F,
        0x72,0x75,0x6D,0x20,0x52,0x65,0x73,0x65,0x61,0x72,0x63,0x68,0x20,0x47,0x72,0x6F,
        0x75,0x70 };
    uint8_t tag[16] = {0};
    uint8_t tag0_ans[] = {
        0xA8,0x06,0x1D,0xC1,0x30,0x51,0x36,0xC6,0xC2,0x2B,0x8B,0xAF,0x0C,0x01,0x27,0xA9 };

    printf("Test Ploy1305 vector #0: \n");
    Ploy1305_Get_Tag(key0, msg0, 34, tag);
    Check_Clac_Consistency(tag, tag0_ans, 16);


    //Test Ploy1305 vector #1
    uint8_t key1[] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg1[] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t tag1_ans[] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    printf("Test Ploy1305 vector #1: \n");
    Ploy1305_Get_Tag(key1, msg1, 64, tag);
    Check_Clac_Consistency(tag, tag1_ans, 16);


    //Test Ploy1305 vector #2
    uint8_t key2[] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x36,0xE5,0xF6,0xB5,0xC5,0xE0,0x60,0x70,0xF0,0xEF,0xCA,0x96,0x22,0x7A,0x86,0x3E };
    uint8_t msg2[] = {
        0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,0x74,0x20,0x6D,0x61,0x64,0x65,0x20,0x77,0x69,
        0x74,0x68,0x69,0x6E,0x20,0x74,0x68,0x65,0x20,0x63,0x6F,0x6E,0x74,0x65,0x78,0x74,
        0x20,0x6F,0x66,0x20,0x61,0x6E,0x20,0x49,0x45,0x54,0x46,0x20,0x61,0x63,0x74,0x69,
        0x76,0x69,0x74,0x79,0x20,0x69,0x73,0x20,0x63,0x6F,0x6E,0x73,0x69,0x64,0x65,0x72,
        0x65,0x64,0x20,0x61,0x6E,0x20,0x22,0x49,0x45,0x54,0x46,0x20,0x43,0x6F,0x6E,0x74,
        0x72,0x69,0x62,0x75,0x74,0x69,0x6F,0x6E,0x22,0x2E,0x20,0x53,0x75,0x63,0x68,0x20,
        0x73,0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,0x74,0x73,0x20,0x69,0x6E,0x63,0x6C,0x75,
        0x64,0x65,0x20,0x6F,0x72,0x61,0x6C,0x20,0x73,0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,
        0x74,0x73,0x20,0x69,0x6E,0x20,0x49,0x45,0x54,0x46,0x20,0x73,0x65,0x73,0x73,0x69,
        0x6F,0x6E,0x73,0x2C,0x20,0x61,0x73,0x20,0x77,0x65,0x6C,0x6C,0x20,0x61,0x73,0x20,
        0x77,0x72,0x69,0x74,0x74,0x65,0x6E,0x20,0x61,0x6E,0x64,0x20,0x65,0x6C,0x65,0x63,
        0x74,0x72,0x6F,0x6E,0x69,0x63,0x20,0x63,0x6F,0x6D,0x6D,0x75,0x6E,0x69,0x63,0x61,
        0x74,0x69,0x6F,0x6E,0x73,0x20,0x6D,0x61,0x64,0x65,0x20,0x61,0x74,0x20,0x61,0x6E,
        0x79,0x20,0x74,0x69,0x6D,0x65,0x20,0x6F,0x72,0x20,0x70,0x6C,0x61,0x63,0x65,0x2C,
        0x20,0x77,0x68,0x69,0x63,0x68,0x20,0x61,0x72,0x65,0x20,0x61,0x64,0x64,0x72,0x65,
        0x73,0x73,0x65,0x64,0x20,0x74,0x6F };
    uint8_t tag2_ans[] = {
        0x36,0xE5,0xF6,0xB5,0xC5,0xE0,0x60,0x70,0xF0,0xEF,0xCA,0x96,0x22,0x7A,0x86,0x3E };

    printf("Test Ploy1305 vector #2: \n");
    Ploy1305_Get_Tag(key2, msg2, sizeof(msg2) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag2_ans, 16);


    //Test Ploy1305 vector #3
    uint8_t key3[] = {
        0x36,0xE5,0xF6,0xB5,0xC5,0xE0,0x60,0x70,0xF0,0xEF,0xCA,0x96,0x22,0x7A,0x86,0x3E,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg3[] = {
        0x41,0x6E,0x79,0x20,0x73,0x75,0x62,0x6D,0x69,0x73,0x73,0x69,0x6F,0x6E,0x20,0x74,
        0x6F,0x20,0x74,0x68,0x65,0x20,0x49,0x45,0x54,0x46,0x20,0x69,0x6E,0x74,0x65,0x6E,
        0x64,0x65,0x64,0x20,0x62,0x79,0x20,0x74,0x68,0x65,0x20,0x43,0x6F,0x6E,0x74,0x72,
        0x69,0x62,0x75,0x74,0x6F,0x72,0x20,0x66,0x6F,0x72,0x20,0x70,0x75,0x62,0x6C,0x69,
        0x63,0x61,0x74,0x69,0x6F,0x6E,0x20,0x61,0x73,0x20,0x61,0x6C,0x6C,0x20,0x6F,0x72,
        0x20,0x70,0x61,0x72,0x74,0x20,0x6F,0x66,0x20,0x61,0x6E,0x20,0x49,0x45,0x54,0x46,
        0x20,0x49,0x6E,0x74,0x65,0x72,0x6E,0x65,0x74,0x2D,0x44,0x72,0x61,0x66,0x74,0x20,
        0x6F,0x72,0x20,0x52,0x46,0x43,0x20,0x61,0x6E,0x64,0x20,0x61,0x6E,0x79,0x20,0x73,
        0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,0x74,0x20,0x6D,0x61,0x64,0x65,0x20,0x77,0x69,
        0x74,0x68,0x69,0x6E,0x20,0x74,0x68,0x65,0x20,0x63,0x6F,0x6E,0x74,0x65,0x78,0x74,
        0x20,0x6F,0x66,0x20,0x61,0x6E,0x20,0x49,0x45,0x54,0x46,0x20,0x61,0x63,0x74,0x69,
        0x76,0x69,0x74,0x79,0x20,0x69,0x73,0x20,0x63,0x6F,0x6E,0x73,0x69,0x64,0x65,0x72,
        0x65,0x64,0x20,0x61,0x6E,0x20,0x22,0x49,0x45,0x54,0x46,0x20,0x43,0x6F,0x6E,0x74,
        0x72,0x69,0x62,0x75,0x74,0x69,0x6F,0x6E,0x22,0x2E,0x20,0x53,0x75,0x63,0x68,0x20,
        0x73,0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,0x74,0x73,0x20,0x69,0x6E,0x63,0x6C,0x75,
        0x64,0x65,0x20,0x6F,0x72,0x61,0x6C,0x20,0x73,0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,
        0x74,0x73,0x20,0x69,0x6E,0x20,0x49,0x45,0x54,0x46,0x20,0x73,0x65,0x73,0x73,0x69,
        0x6F,0x6E,0x73,0x2C,0x20,0x61,0x73,0x20,0x77,0x65,0x6C,0x6C,0x20,0x61,0x73,0x20,
        0x77,0x72,0x69,0x74,0x74,0x65,0x6E,0x20,0x61,0x6E,0x64,0x20,0x65,0x6C,0x65,0x63,
        0x74,0x72,0x6F,0x6E,0x69,0x63,0x20,0x63,0x6F,0x6D,0x6D,0x75,0x6E,0x69,0x63,0x61,
        0x74,0x69,0x6F,0x6E,0x73,0x20,0x6D,0x61,0x64,0x65,0x20,0x61,0x74,0x20,0x61,0x6E,
        0x79,0x20,0x74,0x69,0x6D,0x65,0x20,0x6F,0x72,0x20,0x70,0x6C,0x61,0x63,0x65,0x2C,
        0x20,0x77,0x68,0x69,0x63,0x68,0x20,0x61,0x72,0x65,0x20,0x61,0x64,0x64,0x72,0x65,
        0x73,0x73,0x65,0x64,0x20,0x74,0x6F };
    uint8_t tag3_ans[] = {
        0xF3,0x47,0x7E,0x7C,0xD9,0x54,0x17,0xAF,0x89,0xA6,0xB8,0x79,0x4C,0x31,0x0C,0xF0 };

    printf("Test Ploy1305 vector #3: \n");
    Ploy1305_Get_Tag(key3, msg3, sizeof(msg3) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag3_ans, 16);


    //Test Ploy1305 vector #4
    uint8_t key4[] = {
        0x1C,0x92,0x40,0xA5,0xEB,0x55,0xD3,0x8A,0xF3,0x33,0x88,0x86,0x04,0xF6,0xB5,0xF0,
        0x47,0x39,0x17,0xC1,0x40,0x2B,0x80,0x09,0x9D,0xCA,0x5C,0xBC,0x20,0x70,0x75,0xC0 };
    uint8_t msg4[] = {
        0x27,0x54,0x77,0x61,0x73,0x20,0x62,0x72,0x69,0x6C,0x6C,0x69,0x67,0x2C,0x20,0x61,
        0x6E,0x64,0x20,0x74,0x68,0x65,0x20,0x73,0x6C,0x69,0x74,0x68,0x79,0x20,0x74,0x6F,
        0x76,0x65,0x73,0x0A,0x44,0x69,0x64,0x20,0x67,0x79,0x72,0x65,0x20,0x61,0x6E,0x64,
        0x20,0x67,0x69,0x6D,0x62,0x6C,0x65,0x20,0x69,0x6E,0x20,0x74,0x68,0x65,0x20,0x77,
        0x61,0x62,0x65,0x3A,0x0A,0x41,0x6C,0x6C,0x20,0x6D,0x69,0x6D,0x73,0x79,0x20,0x77,
        0x65,0x72,0x65,0x20,0x74,0x68,0x65,0x20,0x62,0x6F,0x72,0x6F,0x67,0x6F,0x76,0x65,
        0x73,0x2C,0x0A,0x41,0x6E,0x64,0x20,0x74,0x68,0x65,0x20,0x6D,0x6F,0x6D,0x65,0x20,
        0x72,0x61,0x74,0x68,0x73,0x20,0x6F,0x75,0x74,0x67,0x72,0x61,0x62,0x65,0x2E };
    uint8_t tag4_ans[] = {
        0x45,0x41,0x66,0x9A,0x7E,0xAA,0xEE,0x61,0xE7,0x08,0xDC,0x7C,0xBC,0xC5,0xEB,0x62 };

    printf("Test Ploy1305 vector #4: \n");
    Ploy1305_Get_Tag(key4, msg4, sizeof(msg4) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag4_ans, 16);



    //Test Ploy1305 vector #5
    uint8_t key5[] = {
        0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg5[] = {
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };
    uint8_t tag5_ans[] = {
        0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    printf("Test Ploy1305 vector #5: \n");
    Ploy1305_Get_Tag(key5, msg5, sizeof(msg5) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag5_ans, 16);


    //Test Ploy1305 vector #6
    uint8_t key6[] = {
        0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };
    uint8_t msg6[] = {
        0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t tag6_ans[] = {
        0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    printf("Test Ploy1305 vector #6: \n");
    Ploy1305_Get_Tag(key6, msg6, sizeof(msg6) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag6_ans, 16);


    //Test Ploy1305 vector #7
    uint8_t key7[] = {
        0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg7[] = {
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t tag7_ans[] = {
        0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    printf("Test Ploy1305 vector #7: \n");
    Ploy1305_Get_Tag(key7, msg7, sizeof(msg7) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag7_ans, 16);


    //Test Ploy1305 vector #8
    uint8_t key8[] = {
        0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg8[] = {
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFB,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,
        0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01 };
    uint8_t tag8_ans[] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    printf("Test Ploy1305 vector #8: \n");
    Ploy1305_Get_Tag(key8, msg8, sizeof(msg8) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag8_ans, 16);


    //Test Ploy1305 vector #9
    uint8_t key9[] = {
        0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg9[] = {
        0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };
    uint8_t tag9_ans[] = {
        0xFA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };

    printf("Test Ploy1305 vector #9: \n");
    Ploy1305_Get_Tag(key9, msg9, sizeof(msg9) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag9_ans, 16);


    //Test Ploy1305 vector #10
    uint8_t key10[] = {
        0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg10[] = {
        0xE3,0x35,0x94,0xD7,0x50,0x5E,0x43,0xB9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x33,0x94,0xD7,0x50,0x5E,0x43,0x79,0xCD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t tag10_ans[] = {
        0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    printf("Test Ploy1305 vector #10: \n");
    Ploy1305_Get_Tag(key10, msg10, sizeof(msg10) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag10_ans, 16);


    //Test Ploy1305 vector #11
    uint8_t key11[] = {
        0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg11[] = {
        0xE3,0x35,0x94,0xD7,0x50,0x5E,0x43,0xB9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x33,0x94,0xD7,0x50,0x5E,0x43,0x79,0xCD,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t tag11_ans[] = {
        0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    printf("Test Ploy1305 vector #11: \n");
    Ploy1305_Get_Tag(key11, msg11, sizeof(msg11) / sizeof(uint8_t), tag);
    Check_Clac_Consistency(tag, tag11_ans, 16);

}

void Test_ChaCha20()
{
    uint8_t cipher[1024] = { 0 };

    //Test ChaCha20 Encrypt vector #0
    uint8_t key1[32] = {
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
        0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F };
    uint8_t nonce1[12] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4A,0x00,0x00,0x00,0x00 };
    uint8_t msg1[] = {
        0x4C,0x61,0x64,0x69,0x65,0x73,0x20,0x61,0x6E,0x64,0x20,0x47,0x65,0x6E,0x74,0x6C,
        0x65,0x6D,0x65,0x6E,0x20,0x6F,0x66,0x20,0x74,0x68,0x65,0x20,0x63,0x6C,0x61,0x73,
        0x73,0x20,0x6F,0x66,0x20,0x27,0x39,0x39,0x3A,0x20,0x49,0x66,0x20,0x49,0x20,0x63,
        0x6F,0x75,0x6C,0x64,0x20,0x6F,0x66,0x66,0x65,0x72,0x20,0x79,0x6F,0x75,0x20,0x6F,
        0x6E,0x6C,0x79,0x20,0x6F,0x6E,0x65,0x20,0x74,0x69,0x70,0x20,0x66,0x6F,0x72,0x20,
        0x74,0x68,0x65,0x20,0x66,0x75,0x74,0x75,0x72,0x65,0x2C,0x20,0x73,0x75,0x6E,0x73,
        0x63,0x72,0x65,0x65,0x6E,0x20,0x77,0x6F,0x75,0x6C,0x64,0x20,0x62,0x65,0x20,0x69,
        0x74,0x2E };
    uint8_t cipher1_ans[] = {
        0x6E,0x2E,0x35,0x9A,0x25,0x68,0xF9,0x80,0x41,0xBA,0x07,0x28,0xDD,0x0D,0x69,0x81,
        0xE9,0x7E,0x7A,0xEC,0x1D,0x43,0x60,0xC2,0x0A,0x27,0xAF,0xCC,0xFD,0x9F,0xAE,0x0B,
        0xF9,0x1B,0x65,0xC5,0x52,0x47,0x33,0xAB,0x8F,0x59,0x3D,0xAB,0xCD,0x62,0xB3,0x57,
        0x16,0x39,0xD6,0x24,0xE6,0x51,0x52,0xAB,0x8F,0x53,0x0C,0x35,0x9F,0x08,0x61,0xD8,
        0x07,0xCA,0x0D,0xBF,0x50,0x0D,0x6A,0x61,0x56,0xA3,0x8E,0x08,0x8A,0x22,0xB6,0x5E,
        0x52,0xBC,0x51,0x4D,0x16,0xCC,0xF8,0x06,0x81,0x8C,0xE9,0x1A,0xB7,0x79,0x37,0x36,
        0x5A,0xF9,0x0B,0xBF,0x74,0xA3,0x5B,0xE6,0xB4,0x0B,0x8E,0xED,0xF2,0x78,0x5E,0x42,
        0x87,0x4D };
    uint32_t counter1 = 0x01;
    
    printf("Test ChaCHa20 Encrypt vector #0: \n");
    ChaCha20_Encrypt(key1, counter1, nonce1, msg1, 114, cipher);
    Check_Clac_Consistency(cipher, cipher1_ans, 114);


    //Test ChaCha20 Encrypt vector #1
    uint8_t key2[32] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t nonce2[12] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t msg2[] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    uint8_t cipher2_ans[] = {
        0x76,0xB8,0xE0,0xAD,0xA0,0xF1,0x3D,0x90,0x40,0x5D,0x6A,0xE5,0x53,0x86,0xBD,0x28,
        0xBD,0xD2,0x19,0xB8,0xA0,0x8D,0xED,0x1A,0xA8,0x36,0xEF,0xCC,0x8B,0x77,0x0D,0xC7,
        0xDA,0x41,0x59,0x7C,0x51,0x57,0x48,0x8D,0x77,0x24,0xE0,0x3F,0xB8,0xD8,0x4A,0x37,
        0x6A,0x43,0xB8,0xF4,0x15,0x18,0xA1,0x1C,0xC3,0x87,0xB6,0x69,0xB2,0xEE,0x65,0x86 };
    uint32_t counter2 = 0x00;

    printf("Test ChaCHa20 Encrypt vector #1: \n");
    ChaCha20_Encrypt(key1, counter1, nonce1, msg1, 64, cipher);
    Check_Clac_Consistency(cipher, cipher1_ans, 64);


    //Test ChaCha20 Encrypt vector #2
    uint8_t key3[32] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
    uint8_t nonce3[12] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02 };
    uint8_t msg3[] = {
        0x41,0x6E,0x79,0x20,0x73,0x75,0x62,0x6D,0x69,0x73,0x73,0x69,0x6F,0x6E,0x20,0x74,
        0x6F,0x20,0x74,0x68,0x65,0x20,0x49,0x45,0x54,0x46,0x20,0x69,0x6E,0x74,0x65,0x6E,
        0x64,0x65,0x64,0x20,0x62,0x79,0x20,0x74,0x68,0x65,0x20,0x43,0x6F,0x6E,0x74,0x72,
        0x69,0x62,0x75,0x74,0x6F,0x72,0x20,0x66,0x6F,0x72,0x20,0x70,0x75,0x62,0x6C,0x69,
        0x63,0x61,0x74,0x69,0x6F,0x6E,0x20,0x61,0x73,0x20,0x61,0x6C,0x6C,0x20,0x6F,0x72,
        0x20,0x70,0x61,0x72,0x74,0x20,0x6F,0x66,0x20,0x61,0x6E,0x20,0x49,0x45,0x54,0x46,
        0x20,0x49,0x6E,0x74,0x65,0x72,0x6E,0x65,0x74,0x2D,0x44,0x72,0x61,0x66,0x74,0x20,
        0x6F,0x72,0x20,0x52,0x46,0x43,0x20,0x61,0x6E,0x64,0x20,0x61,0x6E,0x79,0x20,0x73,
        0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,0x74,0x20,0x6D,0x61,0x64,0x65,0x20,0x77,0x69,
        0x74,0x68,0x69,0x6E,0x20,0x74,0x68,0x65,0x20,0x63,0x6F,0x6E,0x74,0x65,0x78,0x74,
        0x20,0x6F,0x66,0x20,0x61,0x6E,0x20,0x49,0x45,0x54,0x46,0x20,0x61,0x63,0x74,0x69,
        0x76,0x69,0x74,0x79,0x20,0x69,0x73,0x20,0x63,0x6F,0x6E,0x73,0x69,0x64,0x65,0x72,
        0x65,0x64,0x20,0x61,0x6E,0x20,0x22,0x49,0x45,0x54,0x46,0x20,0x43,0x6F,0x6E,0x74,
        0x72,0x69,0x62,0x75,0x74,0x69,0x6F,0x6E,0x22,0x2E,0x20,0x53,0x75,0x63,0x68,0x20,
        0x73,0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,0x74,0x73,0x20,0x69,0x6E,0x63,0x6C,0x75,
        0x64,0x65,0x20,0x6F,0x72,0x61,0x6C,0x20,0x73,0x74,0x61,0x74,0x65,0x6D,0x65,0x6E,
        0x74,0x73,0x20,0x69,0x6E,0x20,0x49,0x45,0x54,0x46,0x20,0x73,0x65,0x73,0x73,0x69,
        0x6F,0x6E,0x73,0x2C,0x20,0x61,0x73,0x20,0x77,0x65,0x6C,0x6C,0x20,0x61,0x73,0x20,
        0x77,0x72,0x69,0x74,0x74,0x65,0x6E,0x20,0x61,0x6E,0x64,0x20,0x65,0x6C,0x65,0x63,
        0x74,0x72,0x6F,0x6E,0x69,0x63,0x20,0x63,0x6F,0x6D,0x6D,0x75,0x6E,0x69,0x63,0x61,
        0x74,0x69,0x6F,0x6E,0x73,0x20,0x6D,0x61,0x64,0x65,0x20,0x61,0x74,0x20,0x61,0x6E,
        0x79,0x20,0x74,0x69,0x6D,0x65,0x20,0x6F,0x72,0x20,0x70,0x6C,0x61,0x63,0x65,0x2C,
        0x20,0x77,0x68,0x69,0x63,0x68,0x20,0x61,0x72,0x65,0x20,0x61,0x64,0x64,0x72,0x65,
        0x73,0x73,0x65,0x64,0x20,0x74,0x6F };
    uint8_t cipher3_ans[] = {
        0xA3,0xFB,0xF0,0x7D,0xF3,0xFA,0x2F,0xDE,0x4F,0x37,0x6C,0xA2,0x3E,0x82,0x73,0x70,
        0x41,0x60,0x5D,0x9F,0x4F,0x4F,0x57,0xBD,0x8C,0xFF,0x2C,0x1D,0x4B,0x79,0x55,0xEC,
        0x2A,0x97,0x94,0x8B,0xD3,0x72,0x29,0x15,0xC8,0xF3,0xD3,0x37,0xF7,0xD3,0x70,0x05,
        0x0E,0x9E,0x96,0xD6,0x47,0xB7,0xC3,0x9F,0x56,0xE0,0x31,0xCA,0x5E,0xB6,0x25,0x0D,
        0x40,0x42,0xE0,0x27,0x85,0xEC,0xEC,0xFA,0x4B,0x4B,0xB5,0xE8,0xEA,0xD0,0x44,0x0E,
        0x20,0xB6,0xE8,0xDB,0x09,0xD8,0x81,0xA7,0xC6,0x13,0x2F,0x42,0x0E,0x52,0x79,0x50,
        0x42,0xBD,0xFA,0x77,0x73,0xD8,0xA9,0x05,0x14,0x47,0xB3,0x29,0x1C,0xE1,0x41,0x1C,
        0x68,0x04,0x65,0x55,0x2A,0xA6,0xC4,0x05,0xB7,0x76,0x4D,0x5E,0x87,0xBE,0xA8,0x5A,
        0xD0,0x0F,0x84,0x49,0xED,0x8F,0x72,0xD0,0xD6,0x62,0xAB,0x05,0x26,0x91,0xCA,0x66,
        0x42,0x4B,0xC8,0x6D,0x2D,0xF8,0x0E,0xA4,0x1F,0x43,0xAB,0xF9,0x37,0xD3,0x25,0x9D,
        0xC4,0xB2,0xD0,0xDF,0xB4,0x8A,0x6C,0x91,0x39,0xDD,0xD7,0xF7,0x69,0x66,0xE9,0x28,
        0xE6,0x35,0x55,0x3B,0xA7,0x6C,0x5C,0x87,0x9D,0x7B,0x35,0xD4,0x9E,0xB2,0xE6,0x2B,
        0x08,0x71,0xCD,0xAC,0x63,0x89,0x39,0xE2,0x5E,0x8A,0x1E,0x0E,0xF9,0xD5,0x28,0x0F,
        0xA8,0xCA,0x32,0x8B,0x35,0x1C,0x3C,0x76,0x59,0x89,0xCB,0xCF,0x3D,0xAA,0x8B,0x6C,
        0xCC,0x3A,0xAF,0x9F,0x39,0x79,0xC9,0x2B,0x37,0x20,0xFC,0x88,0xDC,0x95,0xED,0x84,
        0xA1,0xBE,0x05,0x9C,0x64,0x99,0xB9,0xFD,0xA2,0x36,0xE7,0xE8,0x18,0xB0,0x4B,0x0B,
        0xC3,0x9C,0x1E,0x87,0x6B,0x19,0x3B,0xFE,0x55,0x69,0x75,0x3F,0x88,0x12,0x8C,0xC0,
        0x8A,0xAA,0x9B,0x63,0xD1,0xA1,0x6F,0x80,0xEF,0x25,0x54,0xD7,0x18,0x9C,0x41,0x1F,
        0x58,0x69,0xCA,0x52,0xC5,0xB8,0x3F,0xA3,0x6F,0xF2,0x16,0xB9,0xC1,0xD3,0x00,0x62,
        0xBE,0xBC,0xFD,0x2D,0xC5,0xBC,0xE0,0x91,0x19,0x34,0xFD,0xA7,0x9A,0x86,0xF6,0xE6,
        0x98,0xCE,0xD7,0x59,0xC3,0xFF,0x9B,0x64,0x77,0x33,0x8F,0x3D,0xA4,0xF9,0xCD,0x85,
        0x14,0xEA,0x99,0x82,0xCC,0xAF,0xB3,0x41,0xB2,0x38,0x4D,0xD9,0x02,0xF3,0xD1,0xAB,
        0x7A,0xC6,0x1D,0xD2,0x9C,0x6F,0x21,0xBA,0x5B,0x86,0x2F,0x37,0x30,0xE3,0x7C,0xFD,
        0xC4,0xFD,0x80,0x6C,0x22,0xF2,0x21 };
    uint32_t counter3 = 0x01;

    printf("Test ChaCHa20 Encrypt vector #2: \n");
    ChaCha20_Encrypt(key3, counter3, nonce3, msg3, 375, cipher);
    Check_Clac_Consistency(cipher, cipher3_ans, 375);


    //Test ChaCha20 Encrypt vector #3
    uint8_t key4[32] = {
        0x1C,0x92,0x40,0xA5,0xEB,0x55,0xD3,0x8A,0xF3,0x33,0x88,0x86,0x04,0xF6,0xB5,0xF0,
        0x47,0x39,0x17,0xC1,0x40,0x2B,0x80,0x09,0x9D,0xCA,0x5C,0xBC,0x20,0x70,0x75,0xC0 };
    uint8_t nonce4[12] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02 };
    uint8_t msg4[] = {
        0x27,0x54,0x77,0x61,0x73,0x20,0x62,0x72,0x69,0x6C,0x6C,0x69,0x67,0x2C,0x20,0x61,
        0x6E,0x64,0x20,0x74,0x68,0x65,0x20,0x73,0x6C,0x69,0x74,0x68,0x79,0x20,0x74,0x6F,
        0x76,0x65,0x73,0x0A,0x44,0x69,0x64,0x20,0x67,0x79,0x72,0x65,0x20,0x61,0x6E,0x64,
        0x20,0x67,0x69,0x6D,0x62,0x6C,0x65,0x20,0x69,0x6E,0x20,0x74,0x68,0x65,0x20,0x77,
        0x61,0x62,0x65,0x3A,0x0A,0x41,0x6C,0x6C,0x20,0x6D,0x69,0x6D,0x73,0x79,0x20,0x77,
        0x65,0x72,0x65,0x20,0x74,0x68,0x65,0x20,0x62,0x6F,0x72,0x6F,0x67,0x6F,0x76,0x65,
        0x73,0x2C,0x0A,0x41,0x6E,0x64,0x20,0x74,0x68,0x65,0x20,0x6D,0x6F,0x6D,0x65,0x20,
        0x72,0x61,0x74,0x68,0x73,0x20,0x6F,0x75,0x74,0x67,0x72,0x61,0x62,0x65,0x2E };
    uint8_t cipher4_ans[] = {
        0x62,0xE6,0x34,0x7F,0x95,0xED,0x87,0xA4,0x5F,0xFA,0xE7,0x42,0x6F,0x27,0xA1,0xDF,
        0x5F,0xB6,0x91,0x10,0x04,0x4C,0x0D,0x73,0x11,0x8E,0xFF,0xA9,0x5B,0x01,0xE5,0xCF,
        0x16,0x6D,0x3D,0xF2,0xD7,0x21,0xCA,0xF9,0xB2,0x1E,0x5F,0xB1,0x4C,0x61,0x68,0x71,
        0xFD,0x84,0xC5,0x4F,0x9D,0x65,0xB2,0x83,0x19,0x6C,0x7F,0xE4,0xF6,0x05,0x53,0xEB,
        0xF3,0x9C,0x64,0x02,0xC4,0x22,0x34,0xE3,0x2A,0x35,0x6B,0x3E,0x76,0x43,0x12,0xA6,
        0x1A,0x55,0x32,0x05,0x57,0x16,0xEA,0xD6,0x96,0x25,0x68,0xF8,0x7D,0x3F,0x3F,0x77,
        0x04,0xC6,0xA8,0xD1,0xBC,0xD1,0xBF,0x4D,0x50,0xD6,0x15,0x4B,0x6D,0xA7,0x31,0xB1,
        0x87,0xB5,0x8D,0xFD,0x72,0x8A,0xFA,0x36,0x75,0x7A,0x79,0x7A,0xC1,0x88,0xD1 };
    uint32_t counter4 = 42;

    printf("Test ChaCHa20 Encrypt vector #3: \n");
    ChaCha20_Encrypt(key4, counter4, nonce4, msg4, 127, cipher);
    Check_Clac_Consistency(cipher, cipher4_ans, 127);

}

void Check_Clac_Consistency(uint8_t* a, uint8_t* b, long int len)
{
    if (0x00 != memcmp(a, b, len))
    {
        printf("error!  \n\n");
    }
    else
    {
        printf("computed properly.  \n\n");
    };
}